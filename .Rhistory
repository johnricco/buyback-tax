tibble(r_ = ., n = 1:100) %>%
ggplot(aes(x = n, y = r_)) +
geom_point() +
geom_line()
1:100 %>% map(~calc_s_retained(0.05, 0.02, 1, 0, 0.2, .x) / 0.05) %>% unlist() %>%
tibble(r_ = ., n = 1:100) %>%
ggplot(aes(x = n, y = r_)) +
geom_point() +
geom_line()
1:100 %>% map(~ 1 - calc_s_retained(0.05, 0.02, 1, 0, 0.2, .x) / 0.05) %>% unlist() %>%
tibble(r_ = ., n = 1:100) %>%
ggplot(aes(x = n, y = r_)) +
geom_point() +
geom_line()
calc_s_retained(0.05, 0.02, 1, 0, 0.2, 8)
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.2, 8)
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.23, 8)
calc_s_retained(0.05, 0.02, 0.5, 0.46, 1, 8)
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.23, 8)
calc_s_retained = function(r, pi, share_taxable, share_death, tau_kg, n) {
#----------------------------------------------------------------------------
# Calculates after-tax return on retained earnings.
#
# Parameters:
# - r             (dbl) : real rate of return on corporate equity
# - pi            (dbl) : expected inflation rate
# - share_taxable (dbl) : share of corporate equity subject to domestic tax
# - share_death   (dbl) : share of gains held until death
# - tau           (dbl) : tax rate on capital gains
# - n             (dbl) : holding period in years
#
# Returns: after-tax return on retained earnings (dbl)
#----------------------------------------------------------------------------
# Calculate nominal rate of return
nominal_r = (1 + real_return) * (1 + inflation) - 1
# Calculate sales price at end of holding period (relative to basis of $1)
price = exp(nominal_r * n)
# Calculate effective tax rate, accounting for step up and capital gains
etr = share_taxable * (1 - share_death) * tau_kg
# Calculate tax liability
tax = (price - 1) * etr
# Calculate annualized real after-tax rate of return
s_retained = log(price - tax) / n - pi
return(s_retained)
}
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.23, 8)
calc_s_retained = function(r, pi, share_taxable, share_death, tau_kg, n) {
#----------------------------------------------------------------------------
# Calculates after-tax return on retained earnings.
#
# Parameters:
# - r             (dbl) : real rate of return on corporate equity
# - pi            (dbl) : expected inflation rate
# - share_taxable (dbl) : share of corporate equity subject to domestic tax
# - share_death   (dbl) : share of gains held until death
# - tau           (dbl) : tax rate on capital gains
# - n             (dbl) : holding period in years
#
# Returns: after-tax return on retained earnings (dbl)
#----------------------------------------------------------------------------
# Calculate nominal rate of return
nominal_r = (1 + r) * (1 + pi) - 1
# Calculate sales price at end of holding period (relative to basis of $1)
price = exp(nominal_r * n)
# Calculate effective tax rate, accounting for step up and capital gains
etr = share_taxable * (1 - share_death) * tau_kg
# Calculate tax liability
tax = (price - 1) * etr
# Calculate annualized real after-tax rate of return
s_retained = log(price - tax) / n - pi
return(s_retained)
}
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.23, 8)
calc_s_retained = function(r, pi, share_taxable, share_death, tau_kg, n) {
#----------------------------------------------------------------------------
# Calculates after-tax return on retained earnings.
#
# Parameters:
# - r             (dbl) : real rate of return on corporate equity
# - pi            (dbl) : expected inflation rate
# - share_taxable (dbl) : share of corporate equity subject to domestic tax
# - share_death   (dbl) : share of gains held until death
# - tau           (dbl) : tax rate on capital gains
# - n             (dbl) : holding period in years
#
# Returns: after-tax return on retained earnings (dbl)
#----------------------------------------------------------------------------
# Calculate nominal rate of return
nominal_r = r + pi
# Calculate sales price at end of holding period (relative to basis of $1)
price = exp(nominal_r * n)
# Calculate effective tax rate, accounting for step up and capital gains
etr = share_taxable * (1 - share_death) * tau_kg
# Calculate tax liability
tax = (price - 1) * etr
# Calculate annualized real after-tax rate of return
s_retained = log(price - tax) / n - pi
return(s_retained)
}
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.23, 8)
calc_s_retained = function(r, pi, share_taxable, share_death, tau_kg, n) {
#----------------------------------------------------------------------------
# Calculates after-tax return on retained earnings.
#
# Parameters:
# - r             (dbl) : real rate of return on corporate equity
# - pi            (dbl) : expected inflation rate
# - share_taxable (dbl) : share of corporate equity subject to domestic tax
# - share_death   (dbl) : share of gains held until death
# - tau           (dbl) : tax rate on capital gains
# - n             (dbl) : holding period in years
#
# Returns: after-tax return on retained earnings (dbl)
#----------------------------------------------------------------------------
# Calculate nominal rate of return
nominal_r = (1 + r) * (1 + pi) - 1
# Calculate sales price at end of holding period (relative to basis of $1)
price = exp(nominal_r * n)
# Calculate effective tax rate, accounting for step up and capital gains
etr = share_taxable * (1 - share_death) * tau_kg
# Calculate tax liability
tax = (price - 1) * etr
# Calculate annualized real after-tax rate of return
s_retained = (log(price - tax) / n) / (1 + pi)
return(s_retained)
}
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.23, 8)
calc_s_retained = function(r, pi, share_taxable, share_death, tau_kg, n) {
#----------------------------------------------------------------------------
# Calculates after-tax return on retained earnings ("s" per CBO's user cost
# notation).
#
# Parameters:
# - r             (dbl) : real rate of return on corporate equity
# - pi            (dbl) : expected inflation rate
# - share_taxable (dbl) : share of corporate equity subject to domestic tax
# - share_death   (dbl) : share of gains held until death
# - tau           (dbl) : tax rate on capital gains
# - n             (dbl) : holding period in years
#
# Returns: after-tax return on retained earnings (dbl)
#----------------------------------------------------------------------------
# Calculate nominal rate of return
nominal_r = (1 + r) * (1 + pi) - 1
# Calculate sales price at end of holding period (relative to basis of $1)
price = exp(nominal_r * n)
# Calculate effective tax rate, accounting for step up and capital gains
etr = share_taxable * (1 - share_death) * tau_kg
# Calculate tax liability
tax = (price - 1) * etr
# Calculate nominal annualized real after-tax rate of return
nominal_s_retained = log(price - tax) / n
# Deflate and return
return((1 + nominal_s_retained) / (1 + pi) - 1)
}
calc_s_retained(0.05, 0.02, 0.5, 0.46, 0.23, 8)
calc_s_div = function(r, share_taxable, tau_div) {
#----------------------------------------------------------------------------
# Calculates after-tax return on dividends ("s", per CBO's user cost
# notation, for dividends).
#
# Parameters:
# - r             (dbl) : real rate of return on corporate equity
# - share_taxable (dbl) : share of corporate equity subject to domestic tax
# - tau_div       (dbl) : tax rate on capital gains
#
# Returns: after-tax return on retained earnings (dbl)
#----------------------------------------------------------------------------
return(r * (1 - share_taxable * tau_div))
}
calc_s_div(0.5, 1, 0.2)
calc_s_div(0.5, 1, 0.9)
calc_s_div(0.05, 1, 0.2)
o = 1
(1 - o) + 0 * (1 - m) + (m * o) / (1 - 0.01)
m = 1
(1 - o) + 0 * (1 - m) + (m * o) / (1 - 0.01)
m = 0
(1 - o) + 0 * (1 - m) + (m * o) / (1 - 0.01)
o =1
m = 1
(1 - o) + 0 * (1 - m) + (m * o) / (1 - 0.01)
o = 1
(1 - o) + 0 * (1 - m) + (m * o) / (1 - 0.01)
m= 0
(1 - o) + 0 * (1 - m) + (m * o) / (1 - 0.01)
calc_metr_div = function(r, pi, delta, share_retained, share_taxable,
share_death, n, tau_corp, tau_bb, tau_div, tau_kg) {
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
return(s)
}
calc_metr_div()
calc_metr_div(0.5, 0.02, 0.05, 0.5, 0.5, 0.45, 8, 0.01, 0.21, 0.21, 0.23)
calc_metr_div(0.05, 0.02, 0.05, 0.5, 0.5, 0.45, 8, 0.01, 0.21, 0.21, 0.23)
calc_metr_div = function(r, pi, delta, share_retained, share_taxable,
share_death, n, tau_corp, tau_bb, tau_div, tau_kg) {
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
return(c(s_div, s_retained))
}
calc_metr_div(0.05, 0.02, 0.05, 0.5, 0.5, 0.45, 8, 0.01, 0.21, 0.21, 0.23)
nominal_r = (1 + r) * (1 + pi) - 1
tau_div
rho = nominal_r / (1 + tau_corp)
calc_metr = function(r, pi, delta, share_retained, share_taxable,
share_death, n, tau_corp, tau_bb, tau_div, tau_kg) {
#------
# Firm
#------
rho = r / (1 + tau_corp)
#----------
# Investor
#----------
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
#---------
# Overall
#---------
return((r - s) / r)
}
calc_metr = function(r, pi, delta, share_retained, share_taxable,
share_death, n, tau_corp, tau_bb, tau_div, tau_kg) {
#------
# Firm
#------
rho = r / (1 + tau_corp)
#----------
# Investor
#----------
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
#---------
# Overall
#---------
return((r - s) / rhhoo)
}
calc_metr(0.05, 0.02, 0.05, 0.5, 0.5, 0.45, 8, 0.01, 0.21, 0.21, 0.23)
calc_metr = function(r, pi, delta, share_retained, share_taxable,
share_death, n, tau_corp, tau_bb, tau_div, tau_kg) {
#------
# Firm
#------
rho = r / (1 + tau_corp)
#----------
# Investor
#----------
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
#---------
# Overall
#---------
return((rho - s) / rho)
}
calc_metr(0.05, 0.02, 0.05, 0.5, 0.5, 0.45, 8, 0.01, 0.21, 0.21, 0.23)
calc_metr = function(r, pi, delta, share_retained, share_taxable, share_death,
n, tau_corp, tau_bb, tau_div, tau_kg) {
#----------------------------------------------------------------------------
#  TODO
#
# Parameters:
# TODO
#
# Returns: TODO
#----------------------------------------------------------------------------
#------
# Firm
#------
# Calculate effect of corporate taxes on required rate of return
tax_gross_up = calc_tax_gross_up(tau_corp)
# Calculate required before-tax rate of return
rho = r * tax_gross_up
#----------
# Investor
#----------
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
#---------
# Overall
#---------
return((rho - s) / rho)
}
calc_tax_gross_up = function(tau_corp) {
#----------------------------------------------------------------------------
# Calculates gross-up factor reflecting the effect of tax policy on the
# required before-tax rate of return.
#
# Parameters:
# - tau_corp (dbl) : corporate tax rate
#
# Returns: gross-up factor (dbl)
#----------------------------------------------------------------------------
return(1 / (1 - tau_corp))
}
calc_metr(0.05, 0.02, 0.05, 0.5, 0.5, 0.45, 8, 0.01, 0.21, 0.21, 0.23)
calc_metr(0.05, 0.02, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr(0.06, 0.02, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr(0.06, 0.0, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr(0.05, 0.02, 0, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr(0.05, 0.02, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr = function(r, pi, delta, share_retained, share_taxable, share_death,
n, tau_corp, tau_bb, tau_div, tau_kg) {
#----------------------------------------------------------------------------
#  TODO
#
# Parameters:
# TODO
#
# Returns: TODO
#----------------------------------------------------------------------------
#------
# Firm
#------
# Calculate effect of corporate taxes on required rate of return
tax_gross_up = calc_tax_gross_up(tau_corp)
# Calculate required before-tax rate of return
rho = r * tax_gross_up
#----------
# Investor
#----------
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
#---------
# Overall
#---------
# Calculate marginal effective tax rate
metr = (rho - s) / rho
# Return list of key output
return(
list(
rho        = rho,
s_div      = s_div,
s_retained = s_retained,
metr       = metr
)
)
}
calc_metr(0.05, 0.02, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr = function(r, pi, delta, share_retained, share_taxable, share_death,
n, tau_corp, tau_bb, tau_div, tau_kg) {
#----------------------------------------------------------------------------
#  TODO
#
# Parameters:
# TODO
#
# Returns: TODO
#----------------------------------------------------------------------------
#------
# Firm
#------
# Calculate effect of corporate taxes on required rate of return
tax_gross_up = calc_tax_gross_up(tau_corp)
# Calculate required before-tax rate of return
rho = r * tax_gross_up
#----------
# Investor
#----------
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
#---------
# Overall
#---------
# Calculate marginal effective tax rate
metr = (rho - s) / rho
# Return list of key output
return(
c(
'rho'        = rho,
's_div'      = s_div,
's_retained' = s_retained,
'metr'       = metr
)
)
}
calc_metr(0.05, 0.02, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr(0.05, 0.02, 1, 1, 1, 0, 1, 0, 0.01, 0.2, 0.2)
calc_metr(0.05, 0.0, 1, 1, 1, 0, 1, 0, 0.01, 0.2, 0.2)
calc_metr(0.05, 0.0, 0, 1, 1, 0, 1, 0, 0.01, 0.2, 0.2)
calc_metr(0.05, 0.0, 0, 0, 1, 0, 1, 0, 0.01, 0.2, 0.2)
calc_metr(0.05, 0.0, 0, 0, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
1 - m - m / (1 - 0.01)
1 - m - m / (1 - 0.01)
m
m = 1
1 - m - m / (1 - 0.01)
1 - m + m / (1 - 0.01)
1 + m * (1 / (1 - 0.01) - 1)
1 + m * (1 / (1 - 0) - 1)
calc_tax_gross_up = function(payout, tau_corp, tau_bb, share_retained) {
#----------------------------------------------------------------------------
# Calculates gross-up factor reflecting the effect of tax policy on the
# required before-tax rate of return.
#
# Parameters:
# - payout         (str) : payout type ('div' or 'bb')
# - tau_corp       (dbl) : corporate tax rate
# - tau_bb         (dbl) : buyback excise tax rate
# - share_retained (dbl) : share of earnings retained for future investment
#
# Returns: gross-up factor (dbl)
#----------------------------------------------------------------------------
# Calculate gross-up factor
t = 1 / (1 - tau_corp)
# Adjust for buyback tax
t = t * if_else(payout == 'bb', 1 + share_retained * (1 / (1 + tau_bb) - 1), 1)
return(t)
}
calc_metr = function(payout, r, pi, delta, share_retained, share_taxable,
share_death, n, tau_corp, tau_bb, tau_div, tau_kg) {
#----------------------------------------------------------------------------
#  TODO
#
# Parameters:
# TODO
#
# Returns: TODO
#----------------------------------------------------------------------------
#------
# Firm
#------
# Calculate effect of corporate taxes on required rate of return
tax_gross_up = calc_tax_gross_up(payout, tau_corp, tau_bb, share_retained)
# Calculate required before-tax rate of return
rho = r * tax_gross_up
#----------
# Investor
#----------
# Calculate after-tax return on payout (dividend)
s_div = calc_s_div(r, share_taxable, tau_div)
# Calculate after-tax return on retained earnings
s_retained = calc_s_retained(r, pi, share_taxable, share_death, tau_kg, n)
# Average after-tax returns
s = s_div * (1 - share_retained) + s_retained * share_retained
#---------
# Overall
#---------
# Calculate marginal effective tax rate
metr = (rho - s) / rho
# Return METR and key intermediate calculations
return(
c(
'rho'        = rho,
's_div'      = s_div,
's_retained' = s_retained,
'metr'       = metr
)
)
}
calc_metr(0.05, 0.0, 0, 0, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 0, 0, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 0, 0, 1, 0, 1, 0.21, 0.0, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 1, 0, 1, 0, 1, 0.21, 0.0, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 1, 0, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 1, 1, 1, 0, 1, 0.21, 0.0, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 1, 1, 1, 0, 1, 0.21, 0.0, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
calc_tax_gross_up = function(payout, tau_corp, tau_bb, share_retained) {
#----------------------------------------------------------------------------
# Calculates gross-up factor reflecting the effect of tax policy on the
# required before-tax rate of return.
#
# Parameters:
# - payout         (str) : payout type ('div' or 'bb')
# - tau_corp       (dbl) : corporate tax rate
# - tau_bb         (dbl) : buyback excise tax rate
# - share_retained (dbl) : share of earnings retained for future investment
#
# Returns: gross-up factor (dbl)
#----------------------------------------------------------------------------
# Calculate gross-up factor
t = 1 / (1 - tau_corp)
# Adjust for buyback tax
t = t * if_else(payout == 'bb', 1 + share_retained * (1 / (1 - tau_bb) - 1), 1)
return(t)
}
calc_metr('bb', 0.05, 0.0, 1, 1, 1, 0, 1, 0.21, 0.0, 0.2, 0.2)
calc_metr('bb', 0.05, 0.0, 1, 1, 1, 0, 1, 0.21, 0.01, 0.2, 0.2)
rm(list = ls())
